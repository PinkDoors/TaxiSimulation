// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Driver defines model for Driver.
type Driver struct {
	// Id Идентификатор водителя
	Id *string `json:"id,omitempty"`

	// Lat Latitude in decimal degrees
	Lat float32 `json:"lat"`

	// Lng Longitude in decimal degrees
	Lng float32 `json:"lng"`
}

// LatLngLiteral An object describing a specific location with Latitude and Longitude in decimal degrees.
type LatLngLiteral struct {
	// Lat Latitude in decimal degrees
	Lat float32 `json:"lat"`

	// Lng Longitude in decimal degrees
	Lng float32 `json:"lng"`
}

// GetDriversParams defines parameters for GetDrivers.
type GetDriversParams struct {
	// Lat Latitude in decimal degrees
	Lat float32 `form:"lat" json:"lat"`

	// Lng Longitude in decimal degrees
	Lng float32 `form:"lng" json:"lng"`

	// Radius Radius of serach
	Radius float32 `form:"radius" json:"radius"`
}

// UpdateDriverLocationJSONRequestBody defines body for UpdateDriverLocation for application/json ContentType.
type UpdateDriverLocationJSONRequestBody = LatLngLiteral

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /drivers)
	GetDrivers(w http.ResponseWriter, r *http.Request, params GetDriversParams)

	// (POST /drivers/{driver_id}/location)
	UpdateDriverLocation(w http.ResponseWriter, r *http.Request, driverId openapi_types.UUID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /drivers)
func (_ Unimplemented) GetDrivers(w http.ResponseWriter, r *http.Request, params GetDriversParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /drivers/{driver_id}/location)
func (_ Unimplemented) UpdateDriverLocation(w http.ResponseWriter, r *http.Request, driverId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDrivers operation middleware
func (siw *ServerInterfaceWrapper) GetDrivers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDriversParams

	// ------------- Required query parameter "lat" -------------

	if paramValue := r.URL.Query().Get("lat"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "lat"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "lat", r.URL.Query(), &params.Lat)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lat", Err: err})
		return
	}

	// ------------- Required query parameter "lng" -------------

	if paramValue := r.URL.Query().Get("lng"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "lng"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "lng", r.URL.Query(), &params.Lng)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lng", Err: err})
		return
	}

	// ------------- Required query parameter "radius" -------------

	if paramValue := r.URL.Query().Get("radius"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "radius"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "radius", r.URL.Query(), &params.Radius)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "radius", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDrivers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateDriverLocation operation middleware
func (siw *ServerInterfaceWrapper) UpdateDriverLocation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "driver_id" -------------
	var driverId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "driver_id", runtime.ParamLocationPath, chi.URLParam(r, "driver_id"), &driverId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "driver_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDriverLocation(w, r, driverId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/drivers", wrapper.GetDrivers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/drivers/{driver_id}/location", wrapper.UpdateDriverLocation)
	})

	return r
}

type GetDriversRequestObject struct {
	Params GetDriversParams
}

type GetDriversResponseObject interface {
	VisitGetDriversResponse(w http.ResponseWriter) error
}

type GetDrivers200JSONResponse []Driver

func (response GetDrivers200JSONResponse) VisitGetDriversResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDrivers404Response struct {
}

func (response GetDrivers404Response) VisitGetDriversResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetDrivers500Response struct {
}

func (response GetDrivers500Response) VisitGetDriversResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type UpdateDriverLocationRequestObject struct {
	DriverId openapi_types.UUID `json:"driver_id"`
	Body     *UpdateDriverLocationJSONRequestBody
}

type UpdateDriverLocationResponseObject interface {
	VisitUpdateDriverLocationResponse(w http.ResponseWriter) error
}

type UpdateDriverLocation200Response struct {
}

func (response UpdateDriverLocation200Response) VisitUpdateDriverLocationResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateDriverLocation500Response struct {
}

func (response UpdateDriverLocation500Response) VisitUpdateDriverLocationResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /drivers)
	GetDrivers(ctx context.Context, request GetDriversRequestObject) (GetDriversResponseObject, error)

	// (POST /drivers/{driver_id}/location)
	UpdateDriverLocation(ctx context.Context, request UpdateDriverLocationRequestObject) (UpdateDriverLocationResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetDrivers operation middleware
func (sh *strictHandler) GetDrivers(w http.ResponseWriter, r *http.Request, params GetDriversParams) {
	var request GetDriversRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDrivers(ctx, request.(GetDriversRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDrivers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDriversResponseObject); ok {
		if err := validResponse.VisitGetDriversResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateDriverLocation operation middleware
func (sh *strictHandler) UpdateDriverLocation(w http.ResponseWriter, r *http.Request, driverId openapi_types.UUID) {
	var request UpdateDriverLocationRequestObject

	request.DriverId = driverId

	var body UpdateDriverLocationJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateDriverLocation(ctx, request.(UpdateDriverLocationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateDriverLocation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateDriverLocationResponseObject); ok {
		if err := validResponse.VisitUpdateDriverLocationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6RVXWsjNxT9K+K2j4Pt7W5hmbeWlBIwFLr0KZiizFzbWsbSrKRJCWZgY/oFfehrn/rS",
	"P+ANcXZ2s5n9C1f/qEiy4yTjTWvyksji6OhenXPuzCFTs1JJlNZAOgeTTXHGw/JAixPUfsWL4rsxpEdz",
	"+FzjGFL4rL891V8f6Q+5HcrJUFjUvIA6mUOpVYnaCgx8Ivd/czSZFqUVSkIK9Bdd0Iqu3YIa9zM19J6W",
	"bkGte83onFq6oMYtaEVX7k9IwJ6WCCkYq4WcQF3f7Kjjl5hZqEednQTultWp4CvJIpbF/WMhJ4wzU2Im",
	"xiJjhcq4h7KfhJ2yIbfCVjkyLnM2VHISfwnJcszEjBcsx4lGND1I7rVfcNu9/Yavy7DtV1azY9S+l0JO",
	"dnA8UEaXpE5A46tKaMwhPQpVRV7/dsIWGKu69WSdN/UcQo7VDjn/dgs6p5X7jZa0cgtGb2nJqHULd0ZX",
	"tKJLauiclnRNDa0YNYw+UkuNO6P3jN7QFTV0SUt6536nxv1yzwO0oncJo5be0DW1dB52Nkwe/YFW7szb",
	"J7BeUUuXERHds+luo+gL1CciQ0jgBLWJHTzpDXoD/9SqRMlLASk87Q16T72c3E6Dkv08JCOsJxhU9UIH",
	"0sMcUvgW7cEa4o9pPkMb8Ef76S885FWF+hQSkHzmq4+CbSW0usJkHVtfSUfuPe2y8045edyd3/NcVIap",
	"MTOoeTb9xD06wPa6auTBplTSxJR9MRj4f5mSFmWQhpdlIaLi/ZfGlzO/xScszsLBhybbehJu5w3Xmp/G",
	"INxt9EWVZWgMu/GDP/Rs8KwblbVBmFSWjVUlc4/8MlZ/F3koLWrJi+BX1OwbrVUMsuUTbyqIfoSR39uY",
	"sz+Pix9FXvc3Q8yTl8rYXcndlaqLENVr94dPVxvD+pYa9ys1PrvdCX03Bz+UObcYO92k7r8ScXjgbbLu",
	"aG0Tn7ytS276etAoY6VnfuJCVQXk/W/HKB5GY79W+elentnjI1jHeds16P+wzaPNUCdgAiq+c6ULSGFq",
	"bZn2gyOKqTI2fT54/iR+OSNBxxn/0Ef3mpafcAZ98E5oHxi+1NyaJBsX1KP63wAAAP//J5RVsnsIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
