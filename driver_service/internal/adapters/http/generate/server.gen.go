// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for TripStatus.
const (
	CANCELED     TripStatus = "CANCELED"
	DRIVERFOUND  TripStatus = "DRIVER_FOUND"
	DRIVERSEARCH TripStatus = "DRIVER_SEARCH"
	ENDED        TripStatus = "ENDED"
	ONPOSITION   TripStatus = "ON_POSITION"
	STARTED      TripStatus = "STARTED"
)

// LatLngLiteral An object describing a specific location with Latitude and Longitude in decimal degrees.
type LatLngLiteral struct {
	// Lat Latitude in decimal degrees
	Lat float32 `json:"lat"`

	// Lng Longitude in decimal degrees
	Lng float32 `json:"lng"`
}

// Money defines model for Money.
type Money struct {
	// Amount Amount expressed as a decimal number of major currency units
	Amount float64 `json:"amount"`

	// Currency 3 letter currency code as defined by ISO-4217
	Currency string `json:"currency"`
}

// Trip defines model for Trip.
type Trip struct {
	DriverId *string `json:"driver_id,omitempty"`

	// From An object describing a specific location with Latitude and Longitude in decimal degrees.
	From   *LatLngLiteral      `json:"from,omitempty"`
	Id     *openapi_types.UUID `json:"id,omitempty"`
	Price  *Money              `json:"price,omitempty"`
	Status *TripStatus         `json:"status,omitempty"`

	// To An object describing a specific location with Latitude and Longitude in decimal degrees.
	To *LatLngLiteral `json:"to,omitempty"`
}

// TripStatus defines model for Trip.Status.
type TripStatus string

// GetTripsParams defines parameters for GetTrips.
type GetTripsParams struct {
	UserId openapi_types.UUID `json:"user_id"`
}

// GetTripByIDParams defines parameters for GetTripByID.
type GetTripByIDParams struct {
	UserId openapi_types.UUID `json:"user_id"`
}

// AcceptTripParams defines parameters for AcceptTrip.
type AcceptTripParams struct {
	UserId openapi_types.UUID `json:"user_id"`
}

// CancelTripParams defines parameters for CancelTrip.
type CancelTripParams struct {
	// Reason Reason for trip cancellation
	Reason *string            `form:"reason,omitempty" json:"reason,omitempty"`
	UserId openapi_types.UUID `json:"user_id"`
}

// EndTripParams defines parameters for EndTrip.
type EndTripParams struct {
	UserId openapi_types.UUID `json:"user_id"`
}

// StartTripParams defines parameters for StartTrip.
type StartTripParams struct {
	UserId openapi_types.UUID `json:"user_id"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List trips
	// (GET /trips)
	GetTrips(w http.ResponseWriter, r *http.Request, params GetTripsParams)
	// Get trip by ID
	// (GET /trips/{trip_id})
	GetTripByID(w http.ResponseWriter, r *http.Request, tripId openapi_types.UUID, params GetTripByIDParams)
	// Accept trip
	// (POST /trips/{trip_id}/accept)
	AcceptTrip(w http.ResponseWriter, r *http.Request, tripId openapi_types.UUID, params AcceptTripParams)
	// Cancel trip
	// (POST /trips/{trip_id}/cancel)
	CancelTrip(w http.ResponseWriter, r *http.Request, tripId openapi_types.UUID, params CancelTripParams)
	// End trip
	// (POST /trips/{trip_id}/end)
	EndTrip(w http.ResponseWriter, r *http.Request, tripId openapi_types.UUID, params EndTripParams)
	// Start trip
	// (POST /trips/{trip_id}/start)
	StartTrip(w http.ResponseWriter, r *http.Request, tripId openapi_types.UUID, params StartTripParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List trips
// (GET /trips)
func (_ Unimplemented) GetTrips(w http.ResponseWriter, r *http.Request, params GetTripsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get trip by ID
// (GET /trips/{trip_id})
func (_ Unimplemented) GetTripByID(w http.ResponseWriter, r *http.Request, tripId openapi_types.UUID, params GetTripByIDParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Accept trip
// (POST /trips/{trip_id}/accept)
func (_ Unimplemented) AcceptTrip(w http.ResponseWriter, r *http.Request, tripId openapi_types.UUID, params AcceptTripParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Cancel trip
// (POST /trips/{trip_id}/cancel)
func (_ Unimplemented) CancelTrip(w http.ResponseWriter, r *http.Request, tripId openapi_types.UUID, params CancelTripParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// End trip
// (POST /trips/{trip_id}/end)
func (_ Unimplemented) EndTrip(w http.ResponseWriter, r *http.Request, tripId openapi_types.UUID, params EndTripParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Start trip
// (POST /trips/{trip_id}/start)
func (_ Unimplemented) StartTrip(w http.ResponseWriter, r *http.Request, tripId openapi_types.UUID, params StartTripParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetTrips operation middleware
func (siw *ServerInterfaceWrapper) GetTrips(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTripsParams

	headers := r.Header

	// ------------- Required header parameter "user_id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("user_id")]; found {
		var UserId openapi_types.UUID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "user_id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationHeader, valueList[0], &UserId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
			return
		}

		params.UserId = UserId

	} else {
		err := fmt.Errorf("Header parameter user_id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrips(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTripByID operation middleware
func (siw *ServerInterfaceWrapper) GetTripByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "trip_id" -------------
	var tripId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, chi.URLParam(r, "trip_id"), &tripId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "trip_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTripByIDParams

	headers := r.Header

	// ------------- Required header parameter "user_id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("user_id")]; found {
		var UserId openapi_types.UUID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "user_id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationHeader, valueList[0], &UserId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
			return
		}

		params.UserId = UserId

	} else {
		err := fmt.Errorf("Header parameter user_id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTripByID(w, r, tripId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AcceptTrip operation middleware
func (siw *ServerInterfaceWrapper) AcceptTrip(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "trip_id" -------------
	var tripId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, chi.URLParam(r, "trip_id"), &tripId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "trip_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AcceptTripParams

	headers := r.Header

	// ------------- Required header parameter "user_id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("user_id")]; found {
		var UserId openapi_types.UUID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "user_id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationHeader, valueList[0], &UserId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
			return
		}

		params.UserId = UserId

	} else {
		err := fmt.Errorf("Header parameter user_id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AcceptTrip(w, r, tripId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CancelTrip operation middleware
func (siw *ServerInterfaceWrapper) CancelTrip(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "trip_id" -------------
	var tripId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, chi.URLParam(r, "trip_id"), &tripId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "trip_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CancelTripParams

	// ------------- Optional query parameter "reason" -------------

	err = runtime.BindQueryParameter("form", true, false, "reason", r.URL.Query(), &params.Reason)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reason", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "user_id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("user_id")]; found {
		var UserId openapi_types.UUID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "user_id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationHeader, valueList[0], &UserId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
			return
		}

		params.UserId = UserId

	} else {
		err := fmt.Errorf("Header parameter user_id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelTrip(w, r, tripId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// EndTrip operation middleware
func (siw *ServerInterfaceWrapper) EndTrip(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "trip_id" -------------
	var tripId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, chi.URLParam(r, "trip_id"), &tripId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "trip_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params EndTripParams

	headers := r.Header

	// ------------- Required header parameter "user_id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("user_id")]; found {
		var UserId openapi_types.UUID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "user_id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationHeader, valueList[0], &UserId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
			return
		}

		params.UserId = UserId

	} else {
		err := fmt.Errorf("Header parameter user_id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EndTrip(w, r, tripId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// StartTrip operation middleware
func (siw *ServerInterfaceWrapper) StartTrip(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "trip_id" -------------
	var tripId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, chi.URLParam(r, "trip_id"), &tripId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "trip_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params StartTripParams

	headers := r.Header

	// ------------- Required header parameter "user_id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("user_id")]; found {
		var UserId openapi_types.UUID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "user_id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationHeader, valueList[0], &UserId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
			return
		}

		params.UserId = UserId

	} else {
		err := fmt.Errorf("Header parameter user_id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StartTrip(w, r, tripId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trips", wrapper.GetTrips)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trips/{trip_id}", wrapper.GetTripByID)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/trips/{trip_id}/accept", wrapper.AcceptTrip)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/trips/{trip_id}/cancel", wrapper.CancelTrip)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/trips/{trip_id}/end", wrapper.EndTrip)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/trips/{trip_id}/start", wrapper.StartTrip)
	})

	return r
}

type GetTripsRequestObject struct {
	Params GetTripsParams
}

type GetTripsResponseObject interface {
	VisitGetTripsResponse(w http.ResponseWriter) error
}

type GetTrips200JSONResponse []Trip

func (response GetTrips200JSONResponse) VisitGetTripsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTrips500Response struct {
}

func (response GetTrips500Response) VisitGetTripsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetTrips504Response struct {
}

func (response GetTrips504Response) VisitGetTripsResponse(w http.ResponseWriter) error {
	w.WriteHeader(504)
	return nil
}

type GetTripByIDRequestObject struct {
	TripId openapi_types.UUID `json:"trip_id"`
	Params GetTripByIDParams
}

type GetTripByIDResponseObject interface {
	VisitGetTripByIDResponse(w http.ResponseWriter) error
}

type GetTripByID200JSONResponse Trip

func (response GetTripByID200JSONResponse) VisitGetTripByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTripByID400Response struct {
}

func (response GetTripByID400Response) VisitGetTripByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetTripByID404Response struct {
}

func (response GetTripByID404Response) VisitGetTripByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetTripByID500Response struct {
}

func (response GetTripByID500Response) VisitGetTripByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type AcceptTripRequestObject struct {
	TripId openapi_types.UUID `json:"trip_id"`
	Params AcceptTripParams
}

type AcceptTripResponseObject interface {
	VisitAcceptTripResponse(w http.ResponseWriter) error
}

type AcceptTrip200Response struct {
}

func (response AcceptTrip200Response) VisitAcceptTripResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AcceptTrip404Response struct {
}

func (response AcceptTrip404Response) VisitAcceptTripResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AcceptTrip500Response struct {
}

func (response AcceptTrip500Response) VisitAcceptTripResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CancelTripRequestObject struct {
	TripId openapi_types.UUID `json:"trip_id"`
	Params CancelTripParams
}

type CancelTripResponseObject interface {
	VisitCancelTripResponse(w http.ResponseWriter) error
}

type CancelTrip200Response struct {
}

func (response CancelTrip200Response) VisitCancelTripResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CancelTrip404Response struct {
}

func (response CancelTrip404Response) VisitCancelTripResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CancelTrip500Response struct {
}

func (response CancelTrip500Response) VisitCancelTripResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type EndTripRequestObject struct {
	TripId openapi_types.UUID `json:"trip_id"`
	Params EndTripParams
}

type EndTripResponseObject interface {
	VisitEndTripResponse(w http.ResponseWriter) error
}

type EndTrip200Response struct {
}

func (response EndTrip200Response) VisitEndTripResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type EndTrip404Response struct {
}

func (response EndTrip404Response) VisitEndTripResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type EndTrip500Response struct {
}

func (response EndTrip500Response) VisitEndTripResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type StartTripRequestObject struct {
	TripId openapi_types.UUID `json:"trip_id"`
	Params StartTripParams
}

type StartTripResponseObject interface {
	VisitStartTripResponse(w http.ResponseWriter) error
}

type StartTrip200Response struct {
}

func (response StartTrip200Response) VisitStartTripResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type StartTrip404Response struct {
}

func (response StartTrip404Response) VisitStartTripResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type StartTrip500Response struct {
}

func (response StartTrip500Response) VisitStartTripResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List trips
	// (GET /trips)
	GetTrips(ctx context.Context, request GetTripsRequestObject) (GetTripsResponseObject, error)
	// Get trip by ID
	// (GET /trips/{trip_id})
	GetTripByID(ctx context.Context, request GetTripByIDRequestObject) (GetTripByIDResponseObject, error)
	// Accept trip
	// (POST /trips/{trip_id}/accept)
	AcceptTrip(ctx context.Context, request AcceptTripRequestObject) (AcceptTripResponseObject, error)
	// Cancel trip
	// (POST /trips/{trip_id}/cancel)
	CancelTrip(ctx context.Context, request CancelTripRequestObject) (CancelTripResponseObject, error)
	// End trip
	// (POST /trips/{trip_id}/end)
	EndTrip(ctx context.Context, request EndTripRequestObject) (EndTripResponseObject, error)
	// Start trip
	// (POST /trips/{trip_id}/start)
	StartTrip(ctx context.Context, request StartTripRequestObject) (StartTripResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetTrips operation middleware
func (sh *strictHandler) GetTrips(w http.ResponseWriter, r *http.Request, params GetTripsParams) {
	var request GetTripsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTrips(ctx, request.(GetTripsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTrips")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTripsResponseObject); ok {
		if err := validResponse.VisitGetTripsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTripByID operation middleware
func (sh *strictHandler) GetTripByID(w http.ResponseWriter, r *http.Request, tripId openapi_types.UUID, params GetTripByIDParams) {
	var request GetTripByIDRequestObject

	request.TripId = tripId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTripByID(ctx, request.(GetTripByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTripByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTripByIDResponseObject); ok {
		if err := validResponse.VisitGetTripByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AcceptTrip operation middleware
func (sh *strictHandler) AcceptTrip(w http.ResponseWriter, r *http.Request, tripId openapi_types.UUID, params AcceptTripParams) {
	var request AcceptTripRequestObject

	request.TripId = tripId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AcceptTrip(ctx, request.(AcceptTripRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AcceptTrip")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AcceptTripResponseObject); ok {
		if err := validResponse.VisitAcceptTripResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CancelTrip operation middleware
func (sh *strictHandler) CancelTrip(w http.ResponseWriter, r *http.Request, tripId openapi_types.UUID, params CancelTripParams) {
	var request CancelTripRequestObject

	request.TripId = tripId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CancelTrip(ctx, request.(CancelTripRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CancelTrip")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CancelTripResponseObject); ok {
		if err := validResponse.VisitCancelTripResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// EndTrip operation middleware
func (sh *strictHandler) EndTrip(w http.ResponseWriter, r *http.Request, tripId openapi_types.UUID, params EndTripParams) {
	var request EndTripRequestObject

	request.TripId = tripId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.EndTrip(ctx, request.(EndTripRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EndTrip")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(EndTripResponseObject); ok {
		if err := validResponse.VisitEndTripResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// StartTrip operation middleware
func (sh *strictHandler) StartTrip(w http.ResponseWriter, r *http.Request, tripId openapi_types.UUID, params StartTripParams) {
	var request StartTripRequestObject

	request.TripId = tripId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StartTrip(ctx, request.(StartTripRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StartTrip")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StartTripResponseObject); ok {
		if err := validResponse.VisitStartTripResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXzW4bNxB+FYLtoQW2kvKHxropluoKUO1CUnoJDIPeHck0dskNyXUiGAIS5ZBDD3mD",
	"XvoCghHBbhwrrzD7RgVJ2ZKycmwfGrvIabXkcOab7/s49h7SUCapFCCMptVDqsM9SJj72WKmJfotbkCx",
	"2C5EoEPFU8OloFVaE0Tu7kNoiF/f5aJPGNEphLzHQxLLkNlQ8oKbPdJihpssAsJERFpS9P0bFySCkCcs",
	"JhH0FYAu0YCmSqagDAeHI2amWP0iXzEDDagZpECrVGTJLig6DGgs+ityfAFGMckwoAqeZ1xBRKvPHCqf",
	"dzughpsYPKoFyi5SeJ4sjt+kgIFFstwiS2QmVnRZc+sEXqYKtIaIME3YBVSPjMgeSdi+VCTMlAIRDkgm",
	"uLEdwEuWpBbY2lpp7VFAe1IllkwayWw3hlVEnecoYnlAYjAGFsqE0uqpSQQ9LiAiuwPS7Gz99PD+vZ8X",
	"i9P20yd0oTjX8jxmVl4bxUW/QPGMlQVQ2yso7SqeFhmNFD8AtcMj+/JZmYD2lEzsxvcKerRKvyvPL0F5",
	"dgPKy1oOA+pzXbSRZTwqtmDNy0O4Krn3wTCg2jCTOcQgssR2XW83/2i0dzqNWnv9Vxqcv/+y9XSzTgO6",
	"tbnz+1an2W1ubdKAdrq1drdh1xubdfdcr22uN1qN+gJXc2xG3rDrYYFwu8RFTxYNgn/lIzzCSf4WxzjJ",
	"RwSPcUzyN/gpf4VjPMJTnOAZnuCE4Cec4gSP8T1+wCn+Q/LXOCX563yE0/wVTvEs/5PgEU7xPZ7kI5zg",
	"af6O/OAyneBZ/i4f2TwBwWk+wo8u7zjwaU/zN/nbeaVjHOMHHOMxTvHoRzq/q3XnENIBdWAFC+gBKO07",
	"uVeqlCqWL5mCYCm37i9VSg/saGJmz8lVNoqn7lcfVs0nrg3xIS6NcrOwGdEq3QDTnW2kTLEEDChNq88O",
	"Kbcn94BFoGhABUsszkx7Hy/eDaMyCGaz+hqmHG7bwzqVQvvbcb9SsY9QCgN+7rA0jbkf2OV9bVs4XMjP",
	"DST6Kuu4izg3DFOKDbxflqnpZGEIWpMLVuyhRx7RcmRTGFCCxU4kUKShlFQ++mExeoMZeMEGpMsTkJk5",
	"j7aXLEsSpgafy2JY3/JO7TvdtoFe1PKhfezwaLgg70oNnwya9a8oY1AgqG6nf6iAGYhcXzTw5a1P58Vn",
	"/dyqh662zjWt8nC1VUKplP1vxPZKeOQjV9jE7QtpSE9mIrqp95bctAGzcvYvX/1ajiqzMITU0ZVKvcJZ",
	"Nbff9VLesrE81tty1rWs8N8K7MU4b/8a6oZMhBBfru66278b6n6dsVEo3gampSA9qfzd8ZTFXtMZjOcZ",
	"qMEch3JH6GLZ/4+HvOQ38BCI6HIDNUR0N9zzrY6EhohuoKU2TH1h2Hfs9t3Q0yH9hke9k+IyZW2kO+q1",
	"yVRsxTEmrZbLsQxZvCe1qT6uPK5Q2+LseOED6e9Vn0LzD5QxfsSTwmfPsgB0uD38NwAA//8NKqvxtBEA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
